{"version":3,"sources":["webpack:///../components/checkbox/Checkbox.mdx"],"names":["_frontmatter","name","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","of","Checkbox","__position","__code","__scope","Button","Playground","Props","checked","disabled","Example","state","setCheck","bind","setUncheck","setDisabled","setUndisabled","this","setState","render","onClick","size","React","isMDXComponent"],"mappings":"6pBAUO,IAAMA,EAAe,Q,kNAENC,EAKQ,UAL9B,IAAsBA,EAMhBC,EAAc,CAClBF,gBAEIG,EAAYC,IACH,SAASC,EAAT,GAGZ,QAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,YADR,YAIA,iBAAQ,CACN,GAAM,kBADR,mBAGA,YAAC,IAAD,CAAOC,GAAIC,IAAUF,QAAQ,UAC7B,iBAAQ,CACN,GAAM,eADR,eAGA,YAAC,IAAD,CAAYG,WAAY,EAAGC,OAAQ,6KAA8KC,SAAO,GACtNN,QACAH,kBACAM,aACAI,WACAC,eACAC,WANsN,gBAOtNZ,IAPsN,EAQtNJ,eARsN,GASrNQ,QAAQ,cACX,YAAC,IAAD,CAAUA,QAAQ,YAAlB,WACA,YAAC,IAAD,CAAUS,SAAO,EAACT,QAAQ,YAA1B,WACA,YAAC,IAAD,CAAUU,UAAQ,EAACV,QAAQ,YAA3B,YACA,YAAC,IAAD,CAAUU,UAAQ,EAACD,SAAO,EAACT,QAAQ,YAAnC,uBAEA,iBAAQ,CACN,GAAM,iBADR,iBAGA,YAAC,IAAD,CAAYG,WAAY,EAAGC,OAAQ,61CAAs2CC,SAAO,GAC94CN,QACAH,kBACAM,aACAI,WACAC,eACAC,WAN84C,gBAO94CZ,IAP84C,EAQ94CJ,eAR84C,GAS74CQ,QAAQ,eACR,WAAM,IACCW,EADD,Y,QAEH,WAAYZ,GAAO,aACjB,cAAMA,IAAN,MACKa,MAAQ,CACXF,UAAU,EACVD,SAAS,GAEX,EAAKI,SAAW,EAAKA,SAASC,KAAd,MAChB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,MAClB,EAAKE,YAAc,EAAKA,YAAYF,KAAjB,MACnB,EAAKG,cAAgB,EAAKA,cAAcH,KAAnB,MATJ,E,EAFhB,G,EAAA,G,6EAAA,2BAcHD,SAAA,WACEK,KAAKC,SAAS,CACZV,SAAS,KAhBV,EAoBHM,WAAA,WACEG,KAAKC,SAAS,CACZV,SAAS,KAtBV,EA0BHO,YAAA,WACEE,KAAKC,SAAS,CACZT,UAAU,KA5BX,EAgCHO,cAAA,WACEC,KAAKC,SAAS,CACZT,UAAU,KAlCX,EAsCHU,OAAA,WACE,OAAO,4BACH,YAAC,IAAD,CAAUV,SAAUQ,KAAKN,MAAMF,SAAUD,QAASS,KAAKN,MAAMH,QAAST,QAAQ,YAA9E,qDAGA,YAAC,IAAD,CAAQqB,QAASH,KAAKL,SAAUS,KAAK,IAAItB,QAAQ,UAAjD,SACA,YAAC,IAAD,CAAQqB,QAASH,KAAKH,WAAYO,KAAK,IAAItB,QAAQ,UAAnD,WACA,YAAC,IAAD,CAAQqB,QAASH,KAAKF,YAAaM,KAAK,IAAItB,QAAQ,UAApD,WACA,YAAC,IAAD,CAAQqB,QAASH,KAAKD,cAAeK,KAAK,IAAItB,QAAQ,UAAtD,eA9CH,GACiBuB,aAmDtB,OAAO,YAACZ,EAAD,CAASX,QAAQ,qB,gNAOhCH,EAAW2B,gBAAiB","file":"component---components-checkbox-checkbox-mdx-b56dd9a985ad30bd373d.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/shijisun/edu/projects/imui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport Checkbox from './index';\nimport Button from '../button/index';\nimport { Playground, Props } from 'docz';\nimport './style/index.scss';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Example = makeShortcode(\"Example\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"checkbox\"\n    }}>{`Checkbox`}</h1>\n\n    <h2 {...{\n      \"id\": \"props--methods\"\n    }}>{`Props & Methods`}</h2>\n    <Props of={Checkbox} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic Usage`}</h2>\n    <Playground __position={1} __code={'<Checkbox>default</Checkbox>\\n<Checkbox checked>checked</Checkbox>\\n<Checkbox disabled>disabled</Checkbox>\\n<Checkbox disabled checked>\\n  disabled & checked\\n</Checkbox>'} __scope={{\n      props,\n      DefaultLayout,\n      Checkbox,\n      Button,\n      Playground,\n      Props,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n    <Checkbox mdxType=\"Checkbox\">default</Checkbox>\n    <Checkbox checked mdxType=\"Checkbox\">checked</Checkbox>\n    <Checkbox disabled mdxType=\"Checkbox\">disabled</Checkbox>\n    <Checkbox disabled checked mdxType=\"Checkbox\">disabled & checked</Checkbox>\n    </Playground>\n    <h2 {...{\n      \"id\": \"state-control\"\n    }}>{`State Control`}</h2>\n    <Playground __position={2} __code={'() => {\\n  class Example extends React.Component {\\n    constructor(props) {\\n      super(props)\\n      this.state = {\\n        disabled: false,\\n        checked: false,\\n      }\\n      this.setCheck = this.setCheck.bind(this)\\n      this.setUncheck = this.setUncheck.bind(this)\\n      this.setDisabled = this.setDisabled.bind(this)\\n      this.setUndisabled = this.setUndisabled.bind(this)\\n    }\\n    setCheck() {\\n      this.setState({ checked: true })\\n    }\\n    setUncheck() {\\n      this.setState({ checked: false })\\n    }\\n    setDisabled() {\\n      this.setState({ disabled: true })\\n    }\\n    setUndisabled() {\\n      this.setState({ disabled: false })\\n    }\\n    render() {\\n      return (\\n        <>\\n          <Checkbox\\n            disabled={this.state.disabled}\\n            checked={this.state.checked}\\n          >\\n            Try to control the states by clicking the buttons\\n          </Checkbox>\\n          <Button onClick={this.setCheck} size=\\\"s\\\">\\n            check\\n          </Button>\\n          <Button onClick={this.setUncheck} size=\\\"s\\\">\\n            uncheck\\n          </Button>\\n          <Button onClick={this.setDisabled} size=\\\"s\\\">\\n            disable\\n          </Button>\\n          <Button onClick={this.setUndisabled} size=\\\"s\\\">\\n            undisable\\n          </Button>\\n        </>\\n      )\\n    }\\n  }\\n  return <Example />\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Checkbox,\n      Button,\n      Playground,\n      Props,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        class Example extends React.Component {\n          constructor(props) {\n            super(props);\n            this.state = {\n              disabled: false,\n              checked: false\n            };\n            this.setCheck = this.setCheck.bind(this);\n            this.setUncheck = this.setUncheck.bind(this);\n            this.setDisabled = this.setDisabled.bind(this);\n            this.setUndisabled = this.setUndisabled.bind(this);\n          }\n\n          setCheck() {\n            this.setState({\n              checked: true\n            });\n          }\n\n          setUncheck() {\n            this.setState({\n              checked: false\n            });\n          }\n\n          setDisabled() {\n            this.setState({\n              disabled: true\n            });\n          }\n\n          setUndisabled() {\n            this.setState({\n              disabled: false\n            });\n          }\n\n          render() {\n            return <>\n                <Checkbox disabled={this.state.disabled} checked={this.state.checked} mdxType=\"Checkbox\">\n                    Try to control the states by clicking the buttons\n                </Checkbox>\n                <Button onClick={this.setCheck} size=\"s\" mdxType=\"Button\">check</Button>\n                <Button onClick={this.setUncheck} size=\"s\" mdxType=\"Button\">uncheck</Button>\n                <Button onClick={this.setDisabled} size=\"s\" mdxType=\"Button\">disable</Button>\n                <Button onClick={this.setUndisabled} size=\"s\" mdxType=\"Button\">undisable</Button>\n                </>;\n          }\n\n        }\n\n        return <Example mdxType=\"Example\" />;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}