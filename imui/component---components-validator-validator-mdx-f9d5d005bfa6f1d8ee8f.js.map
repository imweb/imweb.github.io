{"version":3,"sources":["webpack:///../components/validator/Validator.mdx"],"names":["_frontmatter","name","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","of","Validator","__position","__code","__scope","Form","FormRow","Label","Input","Radio","RadioGroup","Dropdown","Datepicker","Button","Message","Playground","Props","Example","state","isFree","hasEndTime","canSubmit","checkers","endFlag","val","callback","isValid","msg","handleTypeChange","bind","handleFlagChange","toggleSubmit","this","setState","validator","checkField","undefined","render","ref","instance","onValid","onInValid","horizontal","required","placeholder","data-required","data-patterns","key","limit","min","max","style","display","defaultValue","onChange","value","options","width","range","disabled","React","msgAlign","inline","enableBtn","disableBtn","getFormValid","alert","refs","isAllValid","type","onClick","scroll","alertResult","resetField","scrollToErrorField","isFieldValid","data-prefix","data-suffix","data-tips","data-required-msg","msgEl","showErrMsg","data","console","log","data-placer","data-trigger","height","isChecking","toggleChecking","data-checking","isMDXComponent"],"mappings":"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","file":"component---components-validator-validator-mdx-f9d5d005bfa6f1d8ee8f.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/shijisun/edu/projects/imui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport Validator from './index';\nimport './style/index.scss';\nimport { Form, FormRow, Label } from '../form/index';\nimport Input from '../input/index';\nimport { Radio, RadioGroup } from '../radio/index';\nimport Dropdown from '../dropdown/index';\nimport Datepicker from '../datepicker/index';\nimport Button from '../button/index';\nimport Message from '../message/index';\nimport { Playground, Props } from 'docz';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Example = makeShortcode(\"Example\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"validator\"\n    }}>{`Validator`}</h1>\n    <p>{`Validator会遍历其所有层级的带有data-patterns属性的表单子元素，通过HOC的方式将其变得可校验化`}</p>\n\n    <h3 {...{\n      \"id\": \"表单元素校验属性\"\n    }}>{`表单元素校验属性`}</h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`属性`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`说明`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`类型`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`默认值`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`data-patterns`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`校验模式，详见说明`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><inlineCode parentName=\"td\">{`array`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><inlineCode parentName=\"td\">{`undefined`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`data-trigger`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`校验时机，传入组件支持的事件prop`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><inlineCode parentName=\"td\">{`string/array`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><inlineCode parentName=\"td\">{`['onChange', 'onBlur']`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`data-checking`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`传入false关闭校验`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><inlineCode parentName=\"td\">{`bool`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><inlineCode parentName=\"td\">{`undefined`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`data-required`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`表单是否必填`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><inlineCode parentName=\"td\">{`bool`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><inlineCode parentName=\"td\">{`undefined`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`data-required-msg`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`自定义必填时提示文案`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><inlineCode parentName=\"td\">{`undefined`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`data-tips`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`默认提示文案，info类型`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><inlineCode parentName=\"td\">{`string`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><inlineCode parentName=\"td\">{`undefined`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`data-placer`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`表单校验结果的回调，当此属性存在时，表单校验信息默认不展示`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><inlineCode parentName=\"td\">{`function`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><inlineCode parentName=\"td\">{`undefined`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`data-prefix`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`表单校验化后，会被im-validator-enhancer包裹，可在表单前增加前缀元素`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><inlineCode parentName=\"td\">{`React Element`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><inlineCode parentName=\"td\">{`undefined`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`data-suffix`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`表单校验化后，会被im-validator-enhancer包裹，可在表单后增加后缀元素`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><inlineCode parentName=\"td\">{`React Element`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}><inlineCode parentName=\"td\">{`undefined`}</inlineCode></td>\n        </tr>\n      </tbody>\n    </table>\n    <h3 {...{\n      \"id\": \"validator-apis\"\n    }}>{`Validator APIs`}</h3>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`方法`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`说明`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`类型`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`checkField(val, name)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`手动触发某一表单元素的校验，当val为undefined时，Validator会尝试取得表单的当前值`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Function(val: `}<inlineCode parentName=\"td\">{`any`}</inlineCode>{`, name: `}<inlineCode parentName=\"td\">{`string`}</inlineCode>{`): `}<inlineCode parentName=\"td\">{`undefined`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`scrollToErrorField(idx, offset)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`滚动到第`}<inlineCode parentName=\"td\">{`idx`}</inlineCode>{`个错误的表单元素`}<strong parentName=\"td\">{`(目前不支持offset参数)`}</strong></td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Function(idx: `}<inlineCode parentName=\"td\">{`number`}</inlineCode>{`, offset: `}<inlineCode parentName=\"td\">{`number`}</inlineCode>{`): `}<inlineCode parentName=\"td\">{`bool`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`isAllValid`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`获取当前Validator下所有表单的是否全部通过校验`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Function(): `}<inlineCode parentName=\"td\">{`bool`}</inlineCode></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`isFieldValid(name)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`获取当前Validator下某个表单的校验值`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Function(): \\`null`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`resetField(name)`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`重置当前Validator下某个表单的校验状态`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": \"left\"\n          }}>{`Function(): `}<inlineCode parentName=\"td\">{`undefined`}</inlineCode></td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"validator-props--methods\"\n    }}>{`Validator Props & Methods`}</h2>\n    <Props of={Validator} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic Usage`}</h2>\n    <Playground __position={1} __code={'() => {\\n  class Example extends React.Component {\\n    constructor(props) {\\n      super(props)\\n      this.state = {\\n        isFree: true,\\n        hasEndTime: 0,\\n        canSubmit: false,\\n      }\\n      this.checkers = {\\n        endFlag: (val, callback) => {\\n          let isValid = true\\n          let msg = \\'\\'\\n          if (!this.state.isFree && val === 0) {\\n            isValid = false\\n            msg = \\'付费课必须选择课程截止日期\\'\\n          }\\n          callback({ isValid, msg })\\n        },\\n      }\\n      this.handleTypeChange = this.handleTypeChange.bind(this)\\n      this.handleFlagChange = this.handleFlagChange.bind(this)\\n      this.toggleSubmit = this.toggleSubmit.bind(this)\\n    }\\n    handleTypeChange(val) {\\n      this.setState(\\n        {\\n          isFree: val === 1,\\n        },\\n        () => {\\n          return val === 1\\n            ? this.validator.checkField(undefined, \\'courseRight\\')\\n            : this.validator.checkField(undefined, \\'coursePrice\\')\\n        },\\n      )\\n    }\\n    handleFlagChange(val) {\\n      this.setState(\\n        {\\n          hasEndTime: val === 1,\\n        },\\n        () => {\\n          this.validator.checkField(undefined, \\'courseEndTime\\')\\n        },\\n      )\\n    }\\n    toggleSubmit(val) {\\n      this.setState({\\n        canSubmit: val,\\n      })\\n    }\\n    render() {\\n      return (\\n        <Validator\\n          ref={instance => {\\n            this.validator = instance\\n          }}\\n          checkers={this.checkers}\\n          onValid={() => this.toggleSubmit(true)}\\n          onInValid={() => this.toggleSubmit(false)}\\n        >\\n          <Form horizontal={false}>\\n            <FormRow>\\n              <Label required>课程名称(使用内置校验模式)</Label>\\n              <Input\\n                name=\\\"courseName\\\"\\n                placeholder=\\\"1-10个字\\\"\\n                data-required\\n                data-patterns={[\\n                  {\\n                    key: \\'limit\\',\\n                    msg: \\'须在1-10个字内\\',\\n                    limit: {\\n                      min: 1,\\n                      max: 10,\\n                    },\\n                  },\\n                ]}\\n              />\\n            </FormRow>\\n            <FormRow>\\n              <Label required>课程类型(表单联动)</Label>\\n              <RadioGroup\\n                name=\\\"courseType\\\"\\n                style={{ display: \\'inline\\' }}\\n                defaultValue={1}\\n                onChange={this.handleTypeChange}\\n                data-required\\n                data-patterns={[]}\\n              >\\n                <Radio value={1}>免费</Radio>\\n                <Radio value={2}>收费</Radio>\\n              </RadioGroup>\\n            </FormRow>\\n            {!this.state.isFree ? (\\n              <FormRow>\\n                <Label required>课程价格</Label>\\n                <Input\\n                  name=\\\"coursePrice\\\"\\n                  placeholder=\\\"内置校验模式\\\"\\n                  data-required\\n                  data-patterns={[\\n                    {\\n                      key: \\'range\\',\\n                      msg: \\'须在1-8000元之间\\',\\n                      range: {\\n                        min: 1,\\n                        max: 8000,\\n                      },\\n                    },\\n                  ]}\\n                />\\n              </FormRow>\\n            ) : (\\n              <FormRow>\\n                <Label required>课程版权</Label>\\n                <Dropdown\\n                  name=\\\"courseRight\\\"\\n                  options={[\\n                    {\\n                      value: 1,\\n                      display: \\'免费提供课程版权给课堂\\',\\n                    },\\n                    {\\n                      value: 2,\\n                      display: \\'不提供课程版权\\',\\n                    },\\n                  ]}\\n                  style={{ width: 200 }}\\n                  data-required\\n                  data-patterns={[]}\\n                />\\n              </FormRow>\\n            )}\\n            <FormRow>\\n              <Label>课程有效期(使用传入的校验模式，表单联动)</Label>\\n              <Dropdown\\n                name=\\\"courseEndFlag\\\"\\n                options={[\\n                  {\\n                    value: 1,\\n                    display: \\'课程截止时间\\',\\n                  },\\n                  {\\n                    value: 0,\\n                    display: \\'学习有效期\\',\\n                  },\\n                ]}\\n                style={{ width: 200 }}\\n                onChange={this.handleFlagChange}\\n                data-patterns={[\\n                  {\\n                    key: \\'endFlag\\',\\n                  },\\n                ]}\\n              />\\n              {this.state.hasEndTime ? (\\n                <FormRow>\\n                  <Label required>截止时间</Label>\\n                  <Datepicker\\n                    name=\\\"courseEndTime\\\"\\n                    data-required\\n                    data-patterns={[]}\\n                  />\\n                </FormRow>\\n              ) : null}\\n            </FormRow>\\n            <Button disabled={!this.state.canSubmit}>提交</Button>\\n          </Form>\\n        </Validator>\\n      )\\n    }\\n  }\\n  return <Example />\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Validator,\n      Form,\n      FormRow,\n      Label,\n      Input,\n      Radio,\n      RadioGroup,\n      Dropdown,\n      Datepicker,\n      Button,\n      Message,\n      Playground,\n      Props,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        class Example extends React.Component {\n          constructor(props) {\n            super(props);\n            this.state = {\n              isFree: true,\n              hasEndTime: 0,\n              canSubmit: false\n            };\n            this.checkers = {\n              endFlag: (val, callback) => {\n                let isValid = true;\n                let msg = '';\n\n                if (!this.state.isFree && val === 0) {\n                  isValid = false;\n                  msg = '付费课必须选择课程截止日期';\n                }\n\n                callback({\n                  isValid,\n                  msg\n                });\n              }\n            };\n            this.handleTypeChange = this.handleTypeChange.bind(this);\n            this.handleFlagChange = this.handleFlagChange.bind(this);\n            this.toggleSubmit = this.toggleSubmit.bind(this);\n          }\n\n          handleTypeChange(val) {\n            this.setState({\n              isFree: val === 1\n            }, () => {\n              return val === 1 ? this.validator.checkField(undefined, 'courseRight') : this.validator.checkField(undefined, 'coursePrice');\n            });\n          }\n\n          handleFlagChange(val) {\n            this.setState({\n              hasEndTime: val === 1\n            }, () => {\n              this.validator.checkField(undefined, 'courseEndTime');\n            });\n          }\n\n          toggleSubmit(val) {\n            this.setState({\n              canSubmit: val\n            });\n          }\n\n          render() {\n            return <Validator ref={instance => {\n              this.validator = instance;\n            }} checkers={this.checkers} onValid={() => this.toggleSubmit(true)} onInValid={() => this.toggleSubmit(false)} mdxType=\"Validator\">\n            <Form horizontal={false} mdxType=\"Form\">\n            <FormRow mdxType=\"FormRow\">\n                <Label required mdxType=\"Label\">课程名称(使用内置校验模式)</Label>\n                <Input name=\"courseName\" placeholder=\"1-10个字\" data-required data-patterns={[{\n                    key: 'limit',\n                    msg: '须在1-10个字内',\n                    limit: {\n                      min: 1,\n                      max: 10\n                    }\n                  }]} mdxType=\"Input\" />\n            </FormRow>\n            <FormRow mdxType=\"FormRow\">\n                <Label required mdxType=\"Label\">课程类型(表单联动)</Label>\n                <RadioGroup name=\"courseType\" style={{\n                    display: 'inline'\n                  }} defaultValue={1} onChange={this.handleTypeChange} data-required data-patterns={[]} mdxType=\"RadioGroup\">\n                <Radio value={1} mdxType=\"Radio\">免费</Radio>\n                <Radio value={2} mdxType=\"Radio\">收费</Radio>\n                </RadioGroup>\n            </FormRow>\n            {!this.state.isFree ? <FormRow mdxType=\"FormRow\">\n                <Label required mdxType=\"Label\">课程价格</Label>\n                <Input name=\"coursePrice\" placeholder=\"内置校验模式\" data-required data-patterns={[{\n                    key: 'range',\n                    msg: '须在1-8000元之间',\n                    range: {\n                      min: 1,\n                      max: 8000\n                    }\n                  }]} mdxType=\"Input\" />\n                </FormRow> : <FormRow mdxType=\"FormRow\">\n                <Label required mdxType=\"Label\">课程版权</Label>\n                <Dropdown name=\"courseRight\" options={[{\n                    value: 1,\n                    display: '免费提供课程版权给课堂'\n                  }, {\n                    value: 2,\n                    display: '不提供课程版权'\n                  }]} style={{\n                    width: 200\n                  }} data-required data-patterns={[]} mdxType=\"Dropdown\" />\n                </FormRow>}\n            <FormRow mdxType=\"FormRow\">\n                <Label mdxType=\"Label\">课程有效期(使用传入的校验模式，表单联动)</Label>\n                <Dropdown name=\"courseEndFlag\" options={[{\n                    value: 1,\n                    display: '课程截止时间'\n                  }, {\n                    value: 0,\n                    display: '学习有效期'\n                  }]} style={{\n                    width: 200\n                  }} onChange={this.handleFlagChange} data-patterns={[{\n                    key: 'endFlag'\n                  }]} mdxType=\"Dropdown\" />\n                {this.state.hasEndTime ? <FormRow mdxType=\"FormRow\">\n                    <Label required mdxType=\"Label\">截止时间</Label>\n                    <Datepicker name=\"courseEndTime\" data-required data-patterns={[]} mdxType=\"Datepicker\" />\n                </FormRow> : null}\n            </FormRow>\n            <Button disabled={!this.state.canSubmit} mdxType=\"Button\">提交</Button>\n            </Form>\n        </Validator>;\n          }\n\n        }\n\n        return <Example mdxType=\"Example\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"msgalign\"\n    }}>{`msgAlign`}</h2>\n    <Playground __position={2} __code={'() => {\\n  class Example extends React.Component {\\n    constructor(props) {\\n      super(props)\\n    }\\n    render() {\\n      return (\\n        <Validator msgAlign=\\\"bottom\\\">\\n          <Form inline horizontal={false}>\\n            <FormRow>\\n              <Label>Email</Label>\\n              <Input\\n                placeholder={\\'xxx@abc.com\\'}\\n                name=\\\"email\\\"\\n                data-required\\n                data-patterns={[\\n                  {\\n                    key: \\'email\\',\\n                    msg: \\'请输入邮箱地址\\',\\n                  },\\n                ]}\\n              />\\n            </FormRow>\\n            <FormRow>\\n              <Label>Mobile</Label>\\n              <Input\\n                placeholder={\\'11位数字\\'}\\n                name=\\\"mobile\\\"\\n                data-required\\n                data-patterns={[\\n                  {\\n                    key: \\'mobile\\',\\n                    msg: \\'请输入手机号码\\',\\n                  },\\n                ]}\\n              />\\n            </FormRow>\\n            <FormRow>\\n              <Label>An Integer</Label>\\n              <Input\\n                placeholder={\\'0\\'}\\n                name=\\\"integer\\\"\\n                data-required\\n                data-patterns={[\\n                  {\\n                    key: \\'integer\\',\\n                    msg: \\'必须是数字\\',\\n                  },\\n                ]}\\n              />\\n            </FormRow>\\n          </Form>\\n          <br />\\n          <Button>Submit</Button>\\n        </Validator>\\n      )\\n    }\\n  }\\n  return <Example />\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Validator,\n      Form,\n      FormRow,\n      Label,\n      Input,\n      Radio,\n      RadioGroup,\n      Dropdown,\n      Datepicker,\n      Button,\n      Message,\n      Playground,\n      Props,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        class Example extends React.Component {\n          constructor(props) {\n            super(props);\n          }\n\n          render() {\n            return <Validator msgAlign=\"bottom\" mdxType=\"Validator\">\n            <Form inline horizontal={false} mdxType=\"Form\">\n            <FormRow mdxType=\"FormRow\">\n                <Label mdxType=\"Label\">Email</Label>\n                <Input placeholder={'xxx@abc.com'} name=\"email\" data-required data-patterns={[{\n                    key: 'email',\n                    msg: '请输入邮箱地址'\n                  }]} mdxType=\"Input\" />\n            </FormRow>\n            <FormRow mdxType=\"FormRow\">\n                <Label mdxType=\"Label\">Mobile</Label>\n                <Input placeholder={'11位数字'} name=\"mobile\" data-required data-patterns={[{\n                    key: 'mobile',\n                    msg: '请输入手机号码'\n                  }]} mdxType=\"Input\" />\n            </FormRow>\n            <FormRow mdxType=\"FormRow\">\n                <Label mdxType=\"Label\">An Integer</Label>\n                <Input placeholder={'0'} name=\"integer\" data-required data-patterns={[{\n                    key: 'integer',\n                    msg: '必须是数字'\n                  }]} mdxType=\"Input\" />\n            </FormRow>\n            </Form>\n            <br />\n            <Button mdxType=\"Button\">Submit</Button>\n        </Validator>;\n          }\n\n        }\n\n        return <Example mdxType=\"Example\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"onvalid--oninvalid\"\n    }}>{`onValid / onInValid`}</h2>\n    <Playground __position={3} __code={'() => {\\n  class Example extends React.Component {\\n    constructor(props) {\\n      super(props)\\n      this.state = {\\n        canSubmit: false,\\n      }\\n      this.enableBtn = this.enableBtn.bind(this)\\n      this.disableBtn = this.disableBtn.bind(this)\\n      this.getFormValid = this.getFormValid.bind(this)\\n    }\\n    enableBtn() {\\n      this.setState({ canSubmit: true })\\n    }\\n    disableBtn() {\\n      this.setState({ canSubmit: false })\\n    }\\n    getFormValid() {\\n      alert(this.refs.validator.isAllValid())\\n    }\\n    render() {\\n      return (\\n        <Validator\\n          ref=\\\"validator\\\"\\n          onValid={this.enableBtn}\\n          onInValid={this.disableBtn}\\n        >\\n          <Form>\\n            <FormRow>\\n              <Label required>手机号</Label>\\n              <Input\\n                name=\\\"field1\\\"\\n                placeholder=\\\"请填写您的手机号\\\"\\n                data-required\\n                data-patterns={[\\n                  {\\n                    key: \\'mobile\\',\\n                    msg: \\'格式不正确\\',\\n                  },\\n                ]}\\n              />\\n            </FormRow>\\n            <FormRow>\\n              <Label>邮箱</Label>\\n              <Input\\n                name=\\\"field2\\\"\\n                placeholder=\\\"请填写您的邮箱\\\"\\n                data-patterns={[\\n                  {\\n                    key: \\'email\\',\\n                    msg: \\'格式不正确\\',\\n                  },\\n                ]}\\n              />\\n            </FormRow>\\n            <FormRow>\\n              <Label>生日</Label>\\n              <Datepicker name=\\\"field3\\\" data-patterns={[]} />\\n            </FormRow>\\n            <FormRow>\\n              <Label required>性别</Label>\\n              <RadioGroup name=\\\"field4\\\" data-required data-patterns={[]}>\\n                <Radio value=\\\"0\\\">男</Radio>\\n                <Radio value=\\\"1\\\">女</Radio>\\n              </RadioGroup>\\n            </FormRow>\\n            <Button type=\\\"button\\\" disabled={!this.state.canSubmit}>\\n              提交\\n            </Button>\\n            <Button type=\\\"button\\\" onClick={this.getFormValid}>\\n              API: isAllValid()\\n            </Button>\\n          </Form>\\n        </Validator>\\n      )\\n    }\\n  }\\n  return <Example />\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Validator,\n      Form,\n      FormRow,\n      Label,\n      Input,\n      Radio,\n      RadioGroup,\n      Dropdown,\n      Datepicker,\n      Button,\n      Message,\n      Playground,\n      Props,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        class Example extends React.Component {\n          constructor(props) {\n            super(props);\n            this.state = {\n              canSubmit: false\n            };\n            this.enableBtn = this.enableBtn.bind(this);\n            this.disableBtn = this.disableBtn.bind(this);\n            this.getFormValid = this.getFormValid.bind(this);\n          }\n\n          enableBtn() {\n            this.setState({\n              canSubmit: true\n            });\n          }\n\n          disableBtn() {\n            this.setState({\n              canSubmit: false\n            });\n          }\n\n          getFormValid() {\n            alert(this.refs.validator.isAllValid());\n          }\n\n          render() {\n            return <Validator ref=\"validator\" onValid={this.enableBtn} onInValid={this.disableBtn} mdxType=\"Validator\">\n                <Form mdxType=\"Form\">\n                <FormRow mdxType=\"FormRow\">\n                    <Label required mdxType=\"Label\">手机号</Label>\n                    <Input name=\"field1\" placeholder=\"请填写您的手机号\" data-required data-patterns={[{\n                    key: 'mobile',\n                    msg: '格式不正确'\n                  }]} mdxType=\"Input\" />\n                </FormRow>\n                <FormRow mdxType=\"FormRow\">\n                    <Label mdxType=\"Label\">邮箱</Label>\n                    <Input name=\"field2\" placeholder=\"请填写您的邮箱\" data-patterns={[{\n                    key: 'email',\n                    msg: '格式不正确'\n                  }]} mdxType=\"Input\" />\n                </FormRow>\n                <FormRow mdxType=\"FormRow\">\n                    <Label mdxType=\"Label\">生日</Label>\n                    <Datepicker name=\"field3\" data-patterns={[]} mdxType=\"Datepicker\" />\n                </FormRow>\n                <FormRow mdxType=\"FormRow\">\n                    <Label required mdxType=\"Label\">性别</Label>\n                    <RadioGroup name=\"field4\" data-required data-patterns={[]} mdxType=\"RadioGroup\">\n                    <Radio value=\"0\" mdxType=\"Radio\">男</Radio>\n                    <Radio value=\"1\" mdxType=\"Radio\">女</Radio>\n                    </RadioGroup>\n                </FormRow>\n                <Button type=\"button\" disabled={!this.state.canSubmit} mdxType=\"Button\">提交</Button>\n                <Button type=\"button\" onClick={this.getFormValid} mdxType=\"Button\">API: isAllValid()</Button>\n                </Form>\n            </Validator>;\n          }\n\n        }\n\n        return <Example mdxType=\"Example\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"validator-apis-1\"\n    }}>{`Validator APIs`}</h2>\n    <Playground __position={4} __code={'() => {\\n  class Example extends React.Component {\\n    constructor(props) {\\n      super(props)\\n      this.scroll = this.scroll.bind(this)\\n      this.alertResult = this.alertResult.bind(this)\\n      this.resetField = this.resetField.bind(this)\\n    }\\n    scroll() {\\n      this.refs.validator.scrollToErrorField(0)\\n    }\\n    alertResult() {\\n      alert(this.refs.validator.isFieldValid(\\'field\\'))\\n    }\\n    resetField() {\\n      this.refs.validator.resetField(\\'field\\')\\n    }\\n    render() {\\n      return (\\n        <Validator ref=\\\"validator\\\">\\n          <Input\\n            name=\\\"field\\\"\\n            placeholder=\\\"YYYY-MM-DD\\\"\\n            data-required\\n            data-patterns={[\\n              {\\n                key: \\'date\\',\\n                msg: \\'请输入日期\\',\\n              },\\n            ]}\\n          />\\n          <br />\\n          <Button onClick={this.scroll}>scrollToErrorField</Button>\\n          <Button onClick={this.alertResult}>isFieldValid</Button>\\n          <Button onClick={this.resetField}>resetField</Button>\\n        </Validator>\\n      )\\n    }\\n  }\\n  return <Example />\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Validator,\n      Form,\n      FormRow,\n      Label,\n      Input,\n      Radio,\n      RadioGroup,\n      Dropdown,\n      Datepicker,\n      Button,\n      Message,\n      Playground,\n      Props,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        class Example extends React.Component {\n          constructor(props) {\n            super(props);\n            this.scroll = this.scroll.bind(this);\n            this.alertResult = this.alertResult.bind(this);\n            this.resetField = this.resetField.bind(this);\n          }\n\n          scroll() {\n            this.refs.validator.scrollToErrorField(0);\n          }\n\n          alertResult() {\n            alert(this.refs.validator.isFieldValid('field'));\n          }\n\n          resetField() {\n            this.refs.validator.resetField('field');\n          }\n\n          render() {\n            return <Validator ref=\"validator\" mdxType=\"Validator\">\n                <Input name=\"field\" placeholder=\"YYYY-MM-DD\" data-required data-patterns={[{\n                key: 'date',\n                msg: '请输入日期'\n              }]} mdxType=\"Input\" />\n                <br />\n                <Button onClick={this.scroll} mdxType=\"Button\">scrollToErrorField</Button>\n                <Button onClick={this.alertResult} mdxType=\"Button\">isFieldValid</Button>\n                <Button onClick={this.resetField} mdxType=\"Button\">resetField</Button>\n            </Validator>;\n          }\n\n        }\n\n        return <Example mdxType=\"Example\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"\"\n    }}></h2>\n    <h1 {...{\n      \"id\": \"enhancer\"\n    }}>{`enhancer`}</h1>\n    <h2 {...{\n      \"id\": \"prefix--suffix\"\n    }}>{`Prefix / Suffix`}</h2>\n    <Playground __position={5} __code={'<Validator>\\n  <Input\\n    name=\\\"field\\\"\\n    data-prefix=\\\"I am a prefix \\\"\\n    data-suffix={<span> I am a suffix</span>}\\n    data-required\\n    data-patterns={[\\n      {\\n        key: \\'email\\',\\n        msg: \\'请输入邮箱地址\\',\\n      },\\n    ]}\\n  />\\n</Validator>'} __scope={{\n      props,\n      DefaultLayout,\n      Validator,\n      Form,\n      FormRow,\n      Label,\n      Input,\n      Radio,\n      RadioGroup,\n      Dropdown,\n      Datepicker,\n      Button,\n      Message,\n      Playground,\n      Props,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n    <Validator mdxType=\"Validator\">\n        <Input name=\"field\" data-prefix=\"I am a prefix \" data-suffix={<span> I am a suffix</span>} data-required data-patterns={[{\n          key: 'email',\n          msg: '请输入邮箱地址'\n        }]} mdxType=\"Input\" />\n    </Validator>\n    </Playground>\n    <h2 {...{\n      \"id\": \"默认提示：data-tips\"\n    }}>{`默认提示：data-tips`}</h2>\n    <Playground __position={6} __code={'<Validator>\\n  <Input\\n    placeholder=\\\"Try data-tips\\\"\\n    name=\\\"required-msg\\\"\\n    data-required\\n    data-tips=\\\"默认提示\\\"\\n    data-patterns={[]}\\n  />\\n</Validator>'} __scope={{\n      props,\n      DefaultLayout,\n      Validator,\n      Form,\n      FormRow,\n      Label,\n      Input,\n      Radio,\n      RadioGroup,\n      Dropdown,\n      Datepicker,\n      Button,\n      Message,\n      Playground,\n      Props,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n    <Validator mdxType=\"Validator\">\n        <Input placeholder=\"Try data-tips\" name=\"required-msg\" data-required data-tips=\"默认提示\" data-patterns={[]} mdxType=\"Input\" />\n    </Validator>\n    </Playground>\n    <h2 {...{\n      \"id\": \"自定义必填提示：data-required-msg\"\n    }}>{`自定义必填提示：data-required-msg`}</h2>\n    <Playground __position={7} __code={'<Validator>\\n  <Input\\n    placeholder={\\'Try data-required-msg\\'}\\n    name=\\\"data-tips\\\"\\n    data-required\\n    data-required-msg=\\\"该选项不能为空，请输入\\\"\\n    data-patterns={[]}\\n  />\\n</Validator>'} __scope={{\n      props,\n      DefaultLayout,\n      Validator,\n      Form,\n      FormRow,\n      Label,\n      Input,\n      Radio,\n      RadioGroup,\n      Dropdown,\n      Datepicker,\n      Button,\n      Message,\n      Playground,\n      Props,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n    <Validator mdxType=\"Validator\">\n        <Input placeholder={'Try data-required-msg'} name=\"data-tips\" data-required data-required-msg=\"该选项不能为空，请输入\" data-patterns={[]} mdxType=\"Input\" />\n    </Validator>\n    </Playground>\n    <h2 {...{\n      \"id\": \"自定义提示信息位置-data-placer\"\n    }}>{`自定义提示信息位置: data-placer`}</h2>\n    <Playground __position={8} __code={'() => {\\n  class Example extends React.Component {\\n    constructor(props) {\\n      super(props)\\n      this.state = {\\n        msgEl: null,\\n      }\\n      this.showErrMsg = this.showErrMsg.bind(this)\\n    }\\n    showErrMsg(data) {\\n      console.log(data)\\n      this.setState({\\n        msgEl: data.msgEl,\\n      })\\n    }\\n    render() {\\n      return (\\n        <Validator>\\n          <span> {this.state.msgEl}</span>\\n          <Input\\n            placeholder=\\\"Try data-placer\\\"\\n            name=\\\"field2\\\"\\n            data-required\\n            data-placer={this.showErrMsg}\\n            data-patterns={[\\n              {\\n                key: \\'email\\',\\n                msg: \\'请输入邮箱地址\\',\\n              },\\n            ]}\\n          />\\n          <span> {this.state.msgEl}</span>\\n        </Validator>\\n      )\\n    }\\n  }\\n  return <Example />\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Validator,\n      Form,\n      FormRow,\n      Label,\n      Input,\n      Radio,\n      RadioGroup,\n      Dropdown,\n      Datepicker,\n      Button,\n      Message,\n      Playground,\n      Props,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        class Example extends React.Component {\n          constructor(props) {\n            super(props);\n            this.state = {\n              msgEl: null\n            };\n            this.showErrMsg = this.showErrMsg.bind(this);\n          }\n\n          showErrMsg(data) {\n            console.log(data);\n            this.setState({\n              msgEl: data.msgEl\n            });\n          }\n\n          render() {\n            return <Validator mdxType=\"Validator\">\n            <span> {this.state.msgEl}</span>\n            <Input placeholder=\"Try data-placer\" name=\"field2\" data-required data-placer={this.showErrMsg} data-patterns={[{\n                key: 'email',\n                msg: '请输入邮箱地址'\n              }]} mdxType=\"Input\" />\n            <span> {this.state.msgEl}</span>\n        </Validator>;\n          }\n\n        }\n\n        return <Example mdxType=\"Example\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"自定义校验时机-data-trigger\"\n    }}>{`自定义校验时机: data-trigger`}</h2>\n    <Playground __position={9} __code={'<Validator>\\n  <Input\\n    name=\\\"field\\\"\\n    placeholder=\\\"onChange Trigger\\\"\\n    data-required\\n    data-trigger=\\\"onChange\\\"\\n    data-patterns={[\\n      {\\n        key: \\'email\\',\\n        msg: \\'请输入邮箱地址\\',\\n      },\\n    ]}\\n  />\\n  <div style={{ height: \\'10px\\' }}> </div>\\n  <Input\\n    name=\\\"field2\\\"\\n    placeholder=\\\"onBlur Trigger\\\"\\n    data-required\\n    data-trigger=\\\"onBlur\\\"\\n    data-patterns={[\\n      {\\n        key: \\'email\\',\\n        msg: \\'请输入邮箱地址\\',\\n      },\\n    ]}\\n  />\\n</Validator>'} __scope={{\n      props,\n      DefaultLayout,\n      Validator,\n      Form,\n      FormRow,\n      Label,\n      Input,\n      Radio,\n      RadioGroup,\n      Dropdown,\n      Datepicker,\n      Button,\n      Message,\n      Playground,\n      Props,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n    <Validator mdxType=\"Validator\">\n        <Input name=\"field\" placeholder=\"onChange Trigger\" data-required data-trigger=\"onChange\" data-patterns={[{\n          key: 'email',\n          msg: '请输入邮箱地址'\n        }]} mdxType=\"Input\" />\n        <div style={{\n          height: '10px'\n        }}> </div>\n        <Input name=\"field2\" placeholder=\"onBlur Trigger\" data-required data-trigger=\"onBlur\" data-patterns={[{\n          key: 'email',\n          msg: '请输入邮箱地址'\n        }]} mdxType=\"Input\" />\n    </Validator>\n    </Playground>\n    <h2 {...{\n      \"id\": \"check-on--off\"\n    }}>{`Check On / Off`}</h2>\n    <Playground __position={10} __code={'() => {\\n  class Example extends React.Component {\\n    constructor(props) {\\n      super(props)\\n      this.state = {\\n        isChecking: true,\\n      }\\n      this.toggleChecking = this.toggleChecking.bind(this)\\n    }\\n    toggleChecking() {\\n      this.setState({\\n        isChecking: !this.state.isChecking,\\n      })\\n    }\\n    render() {\\n      return (\\n        <Validator>\\n          <p> The check is {this.state.isChecking ? \\'on\\' : \\'off\\'} </p>\\n          <Input\\n            name=\\\"field\\\"\\n            placeholder=\\\"Try data-checking\\\"\\n            data-checking={this.state.isChecking}\\n            data-patterns={[\\n              {\\n                key: \\'limit\\',\\n                msg: \\'须在5-50个字内\\',\\n                limit: {\\n                  min: 5,\\n                  max: 50,\\n                },\\n              },\\n            ]}\\n          />\\n          <br />\\n          <Button onClick={this.toggleChecking}>toggle校验</Button>\\n        </Validator>\\n      )\\n    }\\n  }\\n  return <Example />\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Validator,\n      Form,\n      FormRow,\n      Label,\n      Input,\n      Radio,\n      RadioGroup,\n      Dropdown,\n      Datepicker,\n      Button,\n      Message,\n      Playground,\n      Props,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        class Example extends React.Component {\n          constructor(props) {\n            super(props);\n            this.state = {\n              isChecking: true\n            };\n            this.toggleChecking = this.toggleChecking.bind(this);\n          }\n\n          toggleChecking() {\n            this.setState({\n              isChecking: !this.state.isChecking\n            });\n          }\n\n          render() {\n            return <Validator mdxType=\"Validator\">\n            <p> The check is {this.state.isChecking ? 'on' : 'off'} </p>\n            <Input name=\"field\" placeholder=\"Try data-checking\" data-checking={this.state.isChecking} data-patterns={[{\n                key: 'limit',\n                msg: '须在5-50个字内',\n                limit: {\n                  min: 5,\n                  max: 50\n                }\n              }]} mdxType=\"Input\" />\n            <br />\n            <Button onClick={this.toggleChecking} mdxType=\"Button\">toggle校验</Button>\n        </Validator>;\n          }\n\n        }\n\n        return <Example mdxType=\"Example\" />;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}