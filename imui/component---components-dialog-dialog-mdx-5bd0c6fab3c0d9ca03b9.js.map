{"version":3,"sources":["webpack:///../node_modules/core-js/modules/es6.string.small.js","webpack:///../components/dialog/Dialog.mdx"],"names":["createHTML","this","_frontmatter","name","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","of","Dialog","__position","__code","__scope","Button","Input","Radio","RadioGroup","Playground","Props","Form","FormRow","Label","Statusbox","Example","state","toggle","bind","ref","refs","newState","setState","render","onClick","visible","succ","onClose","type","msg","subMsg","button","key","info","alert","ques","React","small","size","medium","title","required","placeholder","data-required","data-patterns","value","large","customBtns","zIndex","color","longlong","show","success","confirm","onOk","console","log","onCancel","isMDXComponent"],"mappings":"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","file":"component---components-dialog-dialog-mdx-5bd0c6fab3c0d9ca03b9.js","sourcesContent":["'use strict';\n// B.2.3.11 String.prototype.small()\nrequire('./_string-html')('small', function (createHTML) {\n  return function small() {\n    return createHTML(this, 'small', '', '');\n  };\n});\n","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/shijisun/edu/projects/imui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport Button from '../button/index';\nimport Input from '../input/index';\nimport { Radio, RadioGroup } from '../radio/index';\nimport { Playground, Props } from 'docz';\nimport { Form, FormRow, Label } from '../form/index';\nimport Statusbox from '../statusbox/index';\nimport Dialog from './index';\nimport './style/index.scss';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Example = makeShortcode(\"Example\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"dialog\"\n    }}>{`Dialog`}</h1>\n\n    <h2 {...{\n      \"id\": \"props--methods\"\n    }}>{`Props & Methods`}</h2>\n    <Props of={Dialog} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"types\"\n    }}>{`Types`}</h2>\n    <Playground __position={1} __code={'() => {\\n  class Example extends React.Component {\\n    constructor(props) {\\n      super(props)\\n      this.state = {}\\n      this.toggle = this.toggle.bind(this)\\n    }\\n    toggle(ref) {\\n      if (!ref || !this.refs[ref]) {\\n        return\\n      }\\n      let newState = {}\\n      newState[ref] = !this.state[ref]\\n      this.setState(newState)\\n    }\\n    render() {\\n      return (\\n        <>\\n          <Button onClick={() => this.toggle(\\'succ\\')}>success</Button>\\n          <Button onClick={() => this.toggle(\\'info\\')}>info</Button>\\n          <Button onClick={() => this.toggle(\\'alert\\')}>alert</Button>\\n          <Button onClick={() => this.toggle(\\'ques\\')}>question</Button>\\n          <Dialog\\n            ref=\\\"succ\\\"\\n            visible={this.state.succ}\\n            onClose={() => this.toggle(\\'succ\\')}\\n            type=\\\"success\\\"\\n            msg=\\\"Congrats! You got this!\\\"\\n            subMsg=\\\"See More...\\\"\\n            button={[\\n              <Button onClick={() => this.toggle(\\'succ\\')} key=\\\"confirm\\\">\\n                确定\\n              </Button>,\\n            ]}\\n          />\\n          <Dialog\\n            ref=\\\"info\\\"\\n            visible={this.state.info}\\n            onClose={() => this.toggle(\\'info\\')}\\n            type=\\\"info\\\"\\n            msg=\\\"This is a piece of information for you!\\\"\\n            subMsg=\\\"See More...\\\"\\n            button={[\\n              <Button onClick={() => this.toggle(\\'info\\')} key=\\\"confirm\\\">\\n                确定\\n              </Button>,\\n            ]}\\n          />\\n          <Dialog\\n            ref=\\\"alert\\\"\\n            visible={this.state.alert}\\n            onClose={() => this.toggle(\\'alert\\')}\\n            type=\\\"alert\\\"\\n            msg=\\\"Warning! You haven\\'t reach your KPI this month!\\\"\\n            subMsg=\\\"See More...\\\"\\n            button={[\\n              <Button onClick={() => this.toggle(\\'alert\\')} key=\\\"confirm\\\">\\n                确定\\n              </Button>,\\n            ]}\\n          />\\n          <Dialog\\n            ref=\\\"ques\\\"\\n            visible={this.state.ques}\\n            onClose={() => this.toggle(\\'ques\\')}\\n            type=\\\"question\\\"\\n            msg=\\\"Are you sure about that?\\\"\\n            subMsg=\\\"See More...\\\"\\n            button={[\\n              <Button onClick={() => this.toggle(\\'ques\\')} key=\\\"confirm\\\">\\n                确定\\n              </Button>,\\n            ]}\\n          />\\n        </>\\n      )\\n    }\\n  }\\n  return <Example />\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Button,\n      Input,\n      Radio,\n      RadioGroup,\n      Playground,\n      Props,\n      Form,\n      FormRow,\n      Label,\n      Statusbox,\n      Dialog,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        class Example extends React.Component {\n          constructor(props) {\n            super(props);\n            this.state = {};\n            this.toggle = this.toggle.bind(this);\n          }\n\n          toggle(ref) {\n            if (!ref || !this.refs[ref]) {\n              return;\n            }\n\n            let newState = {};\n            newState[ref] = !this.state[ref];\n            this.setState(newState);\n          }\n\n          render() {\n            return <>\n            <Button onClick={() => this.toggle('succ')} mdxType=\"Button\">success</Button>\n            <Button onClick={() => this.toggle('info')} mdxType=\"Button\">info</Button>\n            <Button onClick={() => this.toggle('alert')} mdxType=\"Button\">alert</Button>\n            <Button onClick={() => this.toggle('ques')} mdxType=\"Button\">question</Button>\n            <Dialog ref=\"succ\" visible={this.state.succ} onClose={() => this.toggle('succ')} type=\"success\" msg=\"Congrats! You got this!\" subMsg=\"See More...\" button={[<Button onClick={() => this.toggle('succ')} key=\"confirm\" mdxType=\"Button\">确定</Button>]} mdxType=\"Dialog\" />\n            <Dialog ref=\"info\" visible={this.state.info} onClose={() => this.toggle('info')} type=\"info\" msg=\"This is a piece of information for you!\" subMsg=\"See More...\" button={[<Button onClick={() => this.toggle('info')} key=\"confirm\" mdxType=\"Button\">确定</Button>]} mdxType=\"Dialog\" />\n            <Dialog ref=\"alert\" visible={this.state.alert} onClose={() => this.toggle('alert')} type=\"alert\" msg=\"Warning! You haven't reach your KPI this month!\" subMsg=\"See More...\" button={[<Button onClick={() => this.toggle('alert')} key=\"confirm\" mdxType=\"Button\">确定</Button>]} mdxType=\"Dialog\" />\n            <Dialog ref=\"ques\" visible={this.state.ques} onClose={() => this.toggle('ques')} type=\"question\" msg=\"Are you sure about that?\" subMsg=\"See More...\" button={[<Button onClick={() => this.toggle('ques')} key=\"confirm\" mdxType=\"Button\">确定</Button>]} mdxType=\"Dialog\" />\n            </>;\n          }\n\n        }\n\n        return <Example mdxType=\"Example\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"sizes\"\n    }}>{`Sizes`}</h2>\n    <Playground __position={2} __code={'() => {\\n  class Example extends React.Component {\\n    constructor(props) {\\n      super(props)\\n      this.state = {}\\n      this.toggle = this.toggle.bind(this)\\n    }\\n    toggle(ref) {\\n      if (!ref || !this.refs[ref]) {\\n        return\\n      }\\n      let newState = {}\\n      newState[ref] = !this.state[ref]\\n      this.setState(newState)\\n    }\\n    render() {\\n      return (\\n        <>\\n          <Button onClick={() => this.toggle(\\'small\\')}>small</Button>\\n          <Button onClick={() => this.toggle(\\'medium\\')}>medium</Button>\\n          <Button onClick={() => this.toggle(\\'large\\')}>large</Button>\\n          <Dialog\\n            ref=\\\"small\\\"\\n            visible={this.state.small}\\n            onClose={() => this.toggle(\\'small\\')}\\n            type=\\\"success\\\"\\n            size=\\\"small\\\"\\n            msg=\\\"This is a small dialog!\\\"\\n            subMsg=\\\"See more...\\\"\\n            button={[\\n              <Button onClick={() => this.toggle(\\'small\\')} key=\\\"confirm\\\">\\n                确定\\n              </Button>,\\n            ]}\\n          />\\n          <Dialog\\n            ref=\\\"medium\\\"\\n            visible={this.state.medium}\\n            onClose={() => this.toggle(\\'medium\\')}\\n            title=\\\"报名提示\\\"\\n            size=\\\"medium\\\"\\n            button={[\\n              <Button onClick={() => this.toggle(\\'medium\\')} key=\\\"confirm\\\">\\n                确定\\n              </Button>,\\n            ]}\\n          >\\n            <Statusbox size=\\\"l\\\" type=\\\"success\\\">\\n              您已成功报名！\\n            </Statusbox>\\n            <Form>\\n              <FormRow>\\n                <Label required>手机号</Label>\\n                <Input\\n                  name=\\\"field1\\\"\\n                  placeholder=\\\"请填写您的手机号\\\"\\n                  data-required\\n                  data-patterns={[\\n                    {\\n                      key: \\'mobile\\',\\n                      msg: \\'格式不正确\\',\\n                    },\\n                  ]}\\n                />\\n              </FormRow>\\n              <FormRow>\\n                <Label>邮箱</Label>\\n                <Input\\n                  name=\\\"field2\\\"\\n                  placeholder=\\\"请填写您的邮箱\\\"\\n                  data-patterns={[\\n                    {\\n                      key: \\'email\\',\\n                      msg: \\'格式不正确\\',\\n                    },\\n                  ]}\\n                />\\n              </FormRow>\\n              <FormRow>\\n                <Label required>性别</Label>\\n                <RadioGroup name=\\\"field4\\\" data-required data-patterns={[]}>\\n                  <Radio value=\\\"0\\\">男</Radio>\\n                  <Radio value=\\\"1\\\">女</Radio>\\n                </RadioGroup>\\n              </FormRow>\\n            </Form>\\n          </Dialog>\\n          <Dialog\\n            ref=\\\"large\\\"\\n            visible={this.state.large}\\n            onClose={() => this.toggle(\\'large\\')}\\n            title=\\\"内容编辑框\\\"\\n            size=\\\"large\\\"\\n            button={[\\n              <Button onClick={() => this.toggle(\\'large\\')} key=\\\"confirm\\\">\\n                提交资料\\n              </Button>,\\n            ]}\\n          >\\n            <Form>\\n              <FormRow>\\n                <Label required>手机号</Label>\\n                <Input name=\\\"field1\\\" placeholder=\\\"请填写您的手机号\\\" />\\n              </FormRow>\\n              <FormRow>\\n                <Label>邮箱</Label>\\n                <Input name=\\\"field2\\\" placeholder=\\\"请填写您的邮箱\\\" />\\n              </FormRow>\\n              <FormRow>\\n                <Label required>性别</Label>\\n                <RadioGroup name=\\\"field4\\\">\\n                  <Radio value=\\\"0\\\">男</Radio>\\n                  <Radio value=\\\"1\\\">女</Radio>\\n                </RadioGroup>\\n              </FormRow>\\n            </Form>\\n          </Dialog>\\n        </>\\n      )\\n    }\\n  }\\n  return <Example />\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Button,\n      Input,\n      Radio,\n      RadioGroup,\n      Playground,\n      Props,\n      Form,\n      FormRow,\n      Label,\n      Statusbox,\n      Dialog,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        class Example extends React.Component {\n          constructor(props) {\n            super(props);\n            this.state = {};\n            this.toggle = this.toggle.bind(this);\n          }\n\n          toggle(ref) {\n            if (!ref || !this.refs[ref]) {\n              return;\n            }\n\n            let newState = {};\n            newState[ref] = !this.state[ref];\n            this.setState(newState);\n          }\n\n          render() {\n            return <>\n            <Button onClick={() => this.toggle('small')} mdxType=\"Button\">small</Button>\n            <Button onClick={() => this.toggle('medium')} mdxType=\"Button\">medium</Button>\n            <Button onClick={() => this.toggle('large')} mdxType=\"Button\">large</Button>\n            <Dialog ref=\"small\" visible={this.state.small} onClose={() => this.toggle('small')} type=\"success\" size=\"small\" msg=\"This is a small dialog!\" subMsg=\"See more...\" button={[<Button onClick={() => this.toggle('small')} key=\"confirm\" mdxType=\"Button\">确定</Button>]} mdxType=\"Dialog\" />\n            <Dialog ref=\"medium\" visible={this.state.medium} onClose={() => this.toggle('medium')} title=\"报名提示\" size=\"medium\" button={[<Button onClick={() => this.toggle('medium')} key=\"confirm\" mdxType=\"Button\">确定</Button>]} mdxType=\"Dialog\">\n            <Statusbox size=\"l\" type=\"success\" mdxType=\"Statusbox\">您已成功报名！</Statusbox>\n            <Form mdxType=\"Form\">\n              <FormRow mdxType=\"FormRow\">\n                <Label required mdxType=\"Label\">手机号</Label>\n                <Input name=\"field1\" placeholder=\"请填写您的手机号\" data-required data-patterns={[{\n                      key: 'mobile',\n                      msg: '格式不正确'\n                    }]} mdxType=\"Input\" />\n              </FormRow>\n              <FormRow mdxType=\"FormRow\">\n                <Label mdxType=\"Label\">邮箱</Label>\n                <Input name=\"field2\" placeholder=\"请填写您的邮箱\" data-patterns={[{\n                      key: 'email',\n                      msg: '格式不正确'\n                    }]} mdxType=\"Input\" />\n              </FormRow>\n              <FormRow mdxType=\"FormRow\">\n                <Label required mdxType=\"Label\">性别</Label>\n                <RadioGroup name=\"field4\" data-required data-patterns={[]} mdxType=\"RadioGroup\">\n                  <Radio value=\"0\" mdxType=\"Radio\">男</Radio>\n                  <Radio value=\"1\" mdxType=\"Radio\">女</Radio>\n                </RadioGroup>\n              </FormRow>\n            </Form>\n          </Dialog>\n            <Dialog ref=\"large\" visible={this.state.large} onClose={() => this.toggle('large')} title=\"内容编辑框\" size=\"large\" button={[<Button onClick={() => this.toggle('large')} key=\"confirm\" mdxType=\"Button\">提交资料</Button>]} mdxType=\"Dialog\">\n            <Form mdxType=\"Form\">\n              <FormRow mdxType=\"FormRow\">\n                <Label required mdxType=\"Label\">手机号</Label>\n                <Input name=\"field1\" placeholder=\"请填写您的手机号\" mdxType=\"Input\" />\n              </FormRow>\n              <FormRow mdxType=\"FormRow\">\n                <Label mdxType=\"Label\">邮箱</Label>\n                <Input name=\"field2\" placeholder=\"请填写您的邮箱\" mdxType=\"Input\" />\n              </FormRow>\n              <FormRow mdxType=\"FormRow\">\n                <Label required mdxType=\"Label\">性别</Label>\n                <RadioGroup name=\"field4\" mdxType=\"RadioGroup\">\n                  <Radio value=\"0\" mdxType=\"Radio\">男</Radio>\n                  <Radio value=\"1\" mdxType=\"Radio\">女</Radio>\n                </RadioGroup>\n              </FormRow>\n            </Form>\n          </Dialog>\n            </>;\n          }\n\n        }\n\n        return <Example mdxType=\"Example\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"customize-buttons\"\n    }}>{`Customize Buttons`}</h2>\n    <Playground __position={3} __code={'() => {\\n  class Example extends React.Component {\\n    constructor(props) {\\n      super(props)\\n      this.state = {}\\n      this.toggle = this.toggle.bind(this)\\n    }\\n    toggle(ref) {\\n      if (!ref || !this.refs[ref]) {\\n        return\\n      }\\n      let newState = {}\\n      newState[ref] = !this.state[ref]\\n      this.setState(newState)\\n    }\\n    render() {\\n      return (\\n        <>\\n          <Button onClick={() => this.toggle(\\'customBtns\\')}>Click me</Button>\\n          <Dialog\\n            ref=\\\"customBtns\\\"\\n            visible={this.state.customBtns}\\n            onClose={() => this.toggle(\\'customBtns\\')}\\n            zIndex={6003}\\n            button={[\\n              <Button onClick={() => this.toggle(\\'customBtns\\')} key=\\\"confirm\\\">\\n                确认\\n              </Button>,\\n              <Button\\n                onClick={() => this.toggle(\\'customBtns\\')}\\n                color=\\\"weak\\\"\\n                key=\\\"cancel\\\"\\n              >\\n                取消\\n              </Button>,\\n            ]}\\n          >\\n            <p>按钮示例</p>\\n          </Dialog>\\n        </>\\n      )\\n    }\\n  }\\n  return <Example />\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Button,\n      Input,\n      Radio,\n      RadioGroup,\n      Playground,\n      Props,\n      Form,\n      FormRow,\n      Label,\n      Statusbox,\n      Dialog,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        class Example extends React.Component {\n          constructor(props) {\n            super(props);\n            this.state = {};\n            this.toggle = this.toggle.bind(this);\n          }\n\n          toggle(ref) {\n            if (!ref || !this.refs[ref]) {\n              return;\n            }\n\n            let newState = {};\n            newState[ref] = !this.state[ref];\n            this.setState(newState);\n          }\n\n          render() {\n            return <>\n            <Button onClick={() => this.toggle('customBtns')} mdxType=\"Button\">Click me</Button>\n            <Dialog ref=\"customBtns\" visible={this.state.customBtns} onClose={() => this.toggle('customBtns')} zIndex={6003} button={[<Button onClick={() => this.toggle('customBtns')} key=\"confirm\" mdxType=\"Button\">确认</Button>, <Button onClick={() => this.toggle('customBtns')} color=\"weak\" key=\"cancel\" mdxType=\"Button\">取消</Button>]} mdxType=\"Dialog\">\n            <p>按钮示例</p>\n            </Dialog>\n            </>;\n          }\n\n        }\n\n        return <Example mdxType=\"Example\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"超长内容\"\n    }}>{`超长内容`}</h2>\n    <Playground __position={4} __code={'() => {\\n  class Example extends React.Component {\\n    constructor(props) {\\n      super(props)\\n      this.state = {}\\n      this.toggle = this.toggle.bind(this)\\n    }\\n    toggle(ref) {\\n      if (!ref || !this.refs[ref]) {\\n        return\\n      }\\n      let newState = {}\\n      newState[ref] = !this.state[ref]\\n      this.setState(newState)\\n    }\\n    render() {\\n      return (\\n        <>\\n          <Button onClick={() => this.toggle(\\'longlong\\')}>Click me</Button>\\n          <Dialog\\n            ref=\\\"longlong\\\"\\n            visible={this.state.longlong}\\n            onClose={() => this.toggle(\\'longlong\\')}\\n            size=\\\"large\\\"\\n            button={[\\n              <Button\\n                onClick={() => this.toggle(\\'longlong\\')}\\n                size=\\\"m\\\"\\n                key=\\\"confirm\\\"\\n              >\\n                确认\\n              </Button>,\\n              <Button\\n                onClick={() => this.toggle(\\'longlong\\')}\\n                size=\\\"m\\\"\\n                color=\\\"weak\\\"\\n                key=\\\"cancel\\\"\\n              >\\n                取消\\n              </Button>,\\n            ]}\\n          >\\n            <p>超长内容的滚动条</p>\\n            <p>\\n              一般内容不应该超长, 整框高度最大600px, 如有超出,\\n              再根据设计稿另行定制\\n            </p>\\n            <p>超长内容</p>\\n            <p>超长内容</p>\\n            <p>超长内容</p>\\n            <p>超长内容</p>\\n            <p>超长内容</p>\\n            <p>超长内容</p>\\n            <p>超长内容</p>\\n            <p>超长内容</p>\\n            <p>超长内容</p>\\n            <p>超长内容</p>\\n            <p>超长内容</p>\\n            <p>超长内容</p>\\n            <p>超长内容</p>\\n            <p>超长内容</p>\\n            <p>超长内容</p>\\n            <p>超长内容</p>\\n            <p>超长内容</p>\\n            <p>超长内容</p>\\n            <p>超长内容</p>\\n            <p>超长内容</p>\\n            <p>超长内容</p>\\n            <p>超长内容</p>\\n            <p>超长内容</p>\\n            <p>超长内容</p>\\n            <p>超长内容</p>\\n            <p>超长内容</p>\\n            <p>超长内容</p>\\n            <p>超长内容</p>\\n            <p>超长内容</p>\\n            <p>超长内容</p>\\n            <p>超长内容</p>\\n            <p>超长内容</p>\\n            <p>超长内容</p>\\n            <p>超长内容</p>\\n            <p>超长内容</p>\\n            <p>超长内容</p>\\n            <p>超长内容</p>\\n            <p>这也太长了吧</p>\\n          </Dialog>\\n        </>\\n      )\\n    }\\n  }\\n  return <Example />\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Button,\n      Input,\n      Radio,\n      RadioGroup,\n      Playground,\n      Props,\n      Form,\n      FormRow,\n      Label,\n      Statusbox,\n      Dialog,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        class Example extends React.Component {\n          constructor(props) {\n            super(props);\n            this.state = {};\n            this.toggle = this.toggle.bind(this);\n          }\n\n          toggle(ref) {\n            if (!ref || !this.refs[ref]) {\n              return;\n            }\n\n            let newState = {};\n            newState[ref] = !this.state[ref];\n            this.setState(newState);\n          }\n\n          render() {\n            return <>\n           <Button onClick={() => this.toggle('longlong')} mdxType=\"Button\">Click me</Button>\n          <Dialog ref=\"longlong\" visible={this.state.longlong} onClose={() => this.toggle('longlong')} size=\"large\" button={[<Button onClick={() => this.toggle('longlong')} size=\"m\" key=\"confirm\" mdxType=\"Button\">确认</Button>, <Button onClick={() => this.toggle('longlong')} size=\"m\" color=\"weak\" key=\"cancel\" mdxType=\"Button\">取消</Button>]} mdxType=\"Dialog\">\n            <p>超长内容的滚动条</p>\n            <p>一般内容不应该超长, 整框高度最大600px, 如有超出, 再根据设计稿另行定制</p>\n            <p>超长内容</p>\n            <p>超长内容</p>\n            <p>超长内容</p>\n            <p>超长内容</p>\n            <p>超长内容</p>\n            <p>超长内容</p>\n            <p>超长内容</p>\n            <p>超长内容</p>\n            <p>超长内容</p>\n            <p>超长内容</p>\n            <p>超长内容</p>\n            <p>超长内容</p>\n            <p>超长内容</p>\n            <p>超长内容</p>\n            <p>超长内容</p>\n            <p>超长内容</p>\n            <p>超长内容</p>\n            <p>超长内容</p>\n            <p>超长内容</p>\n            <p>超长内容</p>\n            <p>超长内容</p>\n            <p>超长内容</p>\n            <p>超长内容</p>\n            <p>超长内容</p>\n            <p>超长内容</p>\n            <p>超长内容</p>\n            <p>超长内容</p>\n            <p>超长内容</p>\n            <p>超长内容</p>\n            <p>超长内容</p>\n            <p>超长内容</p>\n            <p>超长内容</p>\n            <p>超长内容</p>\n            <p>超长内容</p>\n            <p>超长内容</p>\n            <p>超长内容</p>\n            <p>超长内容</p>\n            <p>这也太长了吧</p>\n          </Dialog>\n            </>;\n          }\n\n        }\n\n        return <Example mdxType=\"Example\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"apis\"\n    }}>{`APIs`}</h2>\n    <Playground __position={5} __code={'() => {\\n  class Example extends React.Component {\\n    constructor(props) {\\n      super(props)\\n      this.state = {}\\n      this.toggle = this.toggle.bind(this)\\n    }\\n    toggle(ref) {\\n      if (!ref || !this.refs[ref]) {\\n        return\\n      }\\n      let newState = {}\\n      newState[ref] = !this.state[ref]\\n      this.setState(newState)\\n    }\\n    render() {\\n      return (\\n        <>\\n          <Button onClick={() => Dialog.show({ msg: \\'没有Icon的msg\\' })}>\\n            Show\\n          </Button>\\n          <Button onClick={() => Dialog.info(\\'Info\\')}>Info</Button>\\n          <Button onClick={() => Dialog.success(\\'Success\\')}>Success</Button>\\n          <Button onClick={() => Dialog.alert(\\'Alert\\')}>Alert</Button>\\n          <Button\\n            onClick={() =>\\n              Dialog.confirm({\\n                msg: \\'Confirm\\',\\n                onOk: () => {\\n                  console.log(\\'选择确定\\')\\n                },\\n                onCancel: () => {\\n                  console.log(\\'选择取消\\')\\n                },\\n              })\\n            }\\n          >\\n            Confirm\\n          </Button>\\n        </>\\n      )\\n    }\\n  }\\n  return <Example />\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Button,\n      Input,\n      Radio,\n      RadioGroup,\n      Playground,\n      Props,\n      Form,\n      FormRow,\n      Label,\n      Statusbox,\n      Dialog,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        class Example extends React.Component {\n          constructor(props) {\n            super(props);\n            this.state = {};\n            this.toggle = this.toggle.bind(this);\n          }\n\n          toggle(ref) {\n            if (!ref || !this.refs[ref]) {\n              return;\n            }\n\n            let newState = {};\n            newState[ref] = !this.state[ref];\n            this.setState(newState);\n          }\n\n          render() {\n            return <>\n            <Button onClick={() => Dialog.show({\n                msg: '没有Icon的msg'\n              })} mdxType=\"Button\">Show</Button>\n            <Button onClick={() => Dialog.info('Info')} mdxType=\"Button\">Info</Button>\n            <Button onClick={() => Dialog.success('Success')} mdxType=\"Button\">Success</Button>\n            <Button onClick={() => Dialog.alert('Alert')} mdxType=\"Button\">Alert</Button>\n            <Button onClick={() => Dialog.confirm({\n                msg: 'Confirm',\n                onOk: () => {\n                  console.log('选择确定');\n                },\n                onCancel: () => {\n                  console.log('选择取消');\n                }\n              })} mdxType=\"Button\">Confirm</Button>\n            </>;\n          }\n\n        }\n\n        return <Example mdxType=\"Example\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"onblur\"\n    }}>{`onBlur`}</h2>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}